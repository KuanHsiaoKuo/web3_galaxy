@startmindmap
* WEB3
** web3资料
*** [[https://www.preethikasireddy.com/post/the-architecture-of-a-web-3-0-application The Architecture of a Web 3.0 application]]
** cryptocurrency jobs
*** [[https://eleduck.com/ 电鸭 - 远程工作、自由职业、兼职外包，自由从这开始]]
*** [[https://cryptocurrencyjobs.co/ Cryptocurrency Jobs and Blockchain Jobs - Cryptocurrency Jobs]]
*** [[https://angel.co/jobs Find Startup Jobs Near You and Remote Jobs | AngelList Talent]]
*** [[https://www.paradigm.xyz/opportunities Opportunities - Paradigm]]
**:Hackathons
<code>
黑客松是学习，组队，创造的最好平台。
</code>;
*** [[https://gitcoin.co/hackathon/ Hackathons | Gitcoin]]
*** [[https://dorahacks.io/zh DoraHacks: Build and Contribute to The Future of Web3]]
**** [[https://space.bilibili.com/445312136 DoraHacks的个人空间_哔哩哔哩_bilibili]]
****:[[https://dorahacks.io/zh/hackathon DoraHacks Hackathon]]
<code>
黑客松是学习，组队，创造的最好平台。
</code>;
****:[[https://dorahacks.io/zh/buidl DoraHacks Buidl]]
<code>
提交你的项目到 DoraHacks，将你的想法展示给其他黑客、资助者和投资者。让我们用代码改变世界。
</code>;
***:[[https://github.com/ethereum-boilerplate/ethereum-boilerplate ethereum-boilerplate/ethereum-boilerplate️]]
<code>
The ultimate full-stack Ethereum Dapp Boilerplate which gives you maximum flexibility and speed. Feel free to fork and contribute. Although this repo is called "Ethereum Boilerplate" it works with any EVM system and even Solana support is coming soon! Happy BUIDL!👷‍♂
</code>;
*** [[https://immunefi.com/ Immunefi]]
**:分层
<code>
这里的分层只是为了更好地解剖web3内容，
其实很多内容会跨几个层。
比如区块链就跨了前4层
</code>;
***:Layer(s)0:通信层(RPC/WS)
<code>
区块链数据安全地存储在数据服务器中。
当我们浏览网页或使用任何区块链应用程序时，
我们的机器会请求从服务器访问这些数据。
促进这种数据交换的框架称为客户端-服务器架构。

区块链是点对点 (P2P) 网络，允许客户端与
“点对点”连接，从而更快、更轻松地共享数据。
它只不过是一个庞大的设备网络，它们相互通信
并相互请求数据。这就是分布式账本的创建方式。
与网络上的另一个设备通信的每个设备都是一个节点。
每个节点随机验证交易数据。
</code>;
***:Layers I: Blockchain
<code>
此处是指第一个范围，区块链就属于这个范围
</code>;
****:Layer1:数据层
<code>
区块链只不过是一长串包含交易数据的“块”。
当节点验证一定数量的交易时，数据被捆绑到
一个“块”中，添加到区块链中，并与前一个数据块链接。

“创世块”是链中的第一个块，
因此不需要与任何先前的块链接。
相反，后续块与创世块链接，并且每次添加
新块时都会重复该过程。这就是区块链的形成
和不断发展的方式。

每笔交易都使用发件人钱包的私钥进行“数字签名”。
只有发送者才能访问此密钥，从而确保数据不会被
其他任何人访问或篡改。
这在区块链术语中称为“最终性”。

数字签名还可以保护所有者的身份，
该身份本身是加密的，从而确保了最大的安全性。
</code>;
****:Layer2:网络层
<code>
P2P 框架使各个节点能够交换交易数据以就
交易的有效性达成共识。这意味着每个节点都
必须能够发现网络上的其他节点以进行快速通信。

正是网络层促进了这种“节点间通信”。
由于节点发现、块创建和块添加也由该
层管理，因此也称为“传播层”。
</code>;
****:Layer3:共识层
<code>
这是区块链操作中最关键的层。
这一层负责验证交易，没有它，整个系统都会失败。

该层运行需要一定数量的节点来验证一笔交易的协议。

因此，每笔交易都由多个节点处理，然后这些节点必须
达到相同的结果并就其有效性达成一致。

该框架保持了区块链的去中心化性质，因为没有节点可
以单独控制任何交易数据，并且角色是分布式的。
这称为共识机制。

由于有如此多的节点处理交易，将它们捆绑起来并将它们
添加到区块链中，因此可能会同时创建多个块，从而在区
块链中形成一个分支。

但是，必须始终存在单个链块添加，并且共识层也确保解决此冲突。
</code>;
**** Layer4:激励层
**** Layer5:合约层
*** Layers II: Dapp
****:Layer6:应用层(dApp)
<code>
这是运行智能合约和去中心化应用程序 (dApp) 的层。
智能合约根据某些触发因素做出决策，例如合约到期日、
现货价格的实现等。遵循这些决策的行动由 dApp 执行，
而这一切都发生在应用层。

dApp还促进了用户设备和区块链之间的通信。
因此，应用程序就像面向用户的前端，而主区块链是后端，
数据安全地存储在其中。
</code>;
** 分布式系统
*** Blockchain
**** [[https://www.devpill.me/docs/introduction/foreword/ why split by EVM]]
**** ETH(EVM)
****:non-EVM
<code>
 Examples of other non-EVM compatible blockchains that are
 popular are Solana (Rust/Anchor), Polkadot (Rust/Substrate),
 Cosmos , Terra , and others. Most of these blockchains do or
 will support the EVM stack through various initiatives like
 Neon EVM (Solana), Moonbeam/Moonriver (Polkadot/Kusama),
 EVMOS ( Cosmos ), etc.
</code>;
***** Solona(Rust)
****** [[https://www.anchor-lang.com/ Anchor - Introduction]]
****** [[https://github.com/coral-xyz/anchor coral-xyz/anchor: ⚓ Solana Sealevel Framework]]
*****  [[https://polkadot.network/ Polkadot(Rust)]]
****** Substrate [[https://substrate.io/ 官网]] [[https://docs.substrate.io/?mode=dark doc]] [[https://marketplace.substrate.io/ marketplace]] [[https://kuanhsiaokuo.github.io/programming_anatomy_in_rust/layer5_ecosystem/7_business/blockchain/substrate/substrate_intro.html anatomy]]
*****:[[https://cosmos.network/ Cosmos-C++: The Internet of Blockchains]]
<code>
Cosmos一个最深入人心的描述是“区块链的互联网”，他想让区块链具有互操作性的网络框架，能作为一个桥梁来连接一个个独立的加密货币区块链，解决区块链之间的“孤岛效应”。
Cosmos有一个很独特的宇宙观（Cosmos这个单词的翻译就是宇宙）：这个世界不可能由一个区块链主导，一定是多链并存，多币并行的世界。把整个“各自为政”的区块链世界，整合成一个完整的生态系统，就是它的终极理想。并且在Cosmos的观念中，认为"币"是可以脱离“链”的。在Cosmos里有个核心技术，使得代币可以跨区块链进行转移，这个核心技术就是Tendermint。Tendermint是区块链领域较早的基于拜占廷容错协议的PoS共识引擎。其实所有人都知道，未来的区块链一定是互联互通的，正如所有人在计算机诞生的时候就想到计算机之间一定是互联互通的一样，畅想都畅想完了，谁能把技术最早往前推进一步，谁就是明日之星。而目前跨链技术里最好的项目，一个叫Polkadot（波卡），也是今年绝对的明星项目；另外一个，就是本文的主角Cosmos了。
</code>;
****** Cosmos SDK(Golang)
******* [[https://v1.cosmos.network/sdk Cosmos SDK:Golang - Cosmos Network]]
******* [[https://docs.cosmos.network/ Cosmos SDK Documentation | Cosmos SDK]]
******* [[https://github.com/cosmos/cosmos-sdk cosmos/cosmos-sdk: A Framework for Building High Value Public Blockchains]]
****** Cosmos WASM(Rust)
******* [[https://github.com/CosmWasm/cosmwasm CosmWasm/cosmwasm: Framework for building smart contracts in Wasm for the Cosmos SDK]]
*****:[[https://www.nervos.org/ Home | Nervos Network]]
<code>
The Nervos Network is a layered blockchain network for
tomorrow’s crypto economy.

CKB is the layer 1 of Nervos Network, a public permissionless blockchain.

CKB uses Proof of Work and improved Nakamoto consensus to achieve maximized
performance on average hardware and internet condition, without sacrificing
decentralization and security which are the core value of blockchain.

CKB supports scripting in any programming language with its own CKB-VM,
a virtual machine fully compatible with RISC-V ISA. CKB is a General
Verification Network, its programming model focuses on state verification,
leaves state generation to layer 2 applications/protocols.

The Nervos CKB mainnet launched in 2019. It’s processing thousands of
transactions and keeping assets worth hundreds of millions secure every day.
We are working hard to make it better, focusing mainly on two directions.
1. The first is to optimize the Rust implementation, make it more secure,
running more faster and more friendly to use.
2. The second is to evolve the protocol to extend the system capabilities.

If you love solving challenging problems, system programming, Rust, enjoy
learning, want to make the world better with your talents, and believe in
blockchain, please join us to invent the new internet of trust and value.

</code>;
****** [[https://github.com/nervosnetwork/ckb nervosnetwork/ckb(Rust): The Nervos CKB is a public permissionless blockchain, and the layer 1 of Nervos network.]]
******* 预言机
******** [[https://zhuanlan.zhihu.com/p/243033594 Nervos CKB 预言机的初步探索 - 知乎]]
****** [[https://github.com/nervosnetwork/ckb-vm/ nervosnetwork/ckb-vm(Rust): CKB's vm, based on open source RISC-V ISA]]
****** [[https://github.com/nervosnetwork/rfcs nervosnetwork/rfcs(Rust): This repository contains proposals, standards and documentations related to Nervos Network.]]
***:共识算法(Consensus)
<code>
常见于区块链领域，即达成共识的机制。在分布式系统中，
依据系统对故障组件的容错能力分为崩溃容错协议(crash fault tolerant,CFT)
和拜占庭容错协议（Byzantine fault tolerant,BFT)
</code>;
**** [[https://zh.m.wikipedia.org/wiki/%E5%88%86%E5%B8%83%E5%BC%8F%E8%AE%A1%E7%AE%97 分布式计算 - 维基百科，自由的百科全书]]
**** [[https://zh.m.wikipedia.org/wiki/%E6%8B%9C%E5%8D%A0%E5%BA%AD%E5%B0%86%E5%86%9B%E9%97%AE%E9%A2%98 拜占庭将军问题 - 维基百科，自由的百科全书]]
***** [[https://archive.org/details/sim_acm-transactions-on-computer-systems_2002-11_20_4/page/398/mode/2up ACM Transactions on Computer Systems 2002-11: Vol 20 Iss 4 : Free Download, Borrow, and Streaming : Internet Archive]]
**** [[https://zh.m.wikipedia.org/zh-hans/%E6%8C%81%E6%9C%89%E9%87%8F%E8%AD%89%E6%98%8E 持有量证明(PoS|Proof-of-Stake) - 维基百科，自由的百科全书]]
**** [[https://zh.m.wikipedia.org/zh-hans/%E5%B7%A5%E4%BD%9C%E9%87%8F%E8%AD%89%E6%98%8E 工作量证明(PoW|Proof-of-Work) - 维基百科，自由的百科全书]]
**** PoSpace|Proof-of-space
***** [[https://zh.m.wikipedia.org/zh-hans/%E6%96%87%E4%BB%B6%E5%B8%81 文件币 - 维基百科，自由的百科全书]]
**** DPoS: Delegated-Proof-of-Stake
***** [[https://zh.m.wikipedia.org/zh-hans/EOS.IO EOS.IO - 维基百科，自由的百科全书]]
**** [[https://zh.m.wikipedia.org/zh-hans/Paxos%E7%AE%97%E6%B3%95 Paxos算法 - 维基百科，自由的百科全书]]
****:[[https://zh.m.wikipedia.org/zh-hans/Raft Raft - 维基百科，自由的百科全书]]
<code>
Raft是一种用于替代Paxos的共识算法。相比于Paxos，
Raft的目标是提供更清晰的逻辑分工使得算法本身能被更好地理解，
同时它安全性更高，并能提供一些额外的特性
Raft能为在计算机集群之间部署有限状态机提供一种通用方法，
并确保集群内的任意节点在某种状态转换上保持一致。
Raft算法的开源实现众多，在Go、C++、Java以及Scala中都有
完整的代码实现。
Raft这一名字来源于"Reliable,Replicated,Redundant And Fault-Tolerant"（“可靠、可复制、可冗余、可容错”）的首字母缩写
</code>;
** Dapp
*** 学习资源
****:[[https://github.com/Dapp-Learning-DAO/Dapp-Learning/blob/main/README-CN.md Dapp-Learning]]
<code>
本项目适合有一定语言基础的开发者入门区块链 DAPP 开发，由浅到深了解和开发 DeFi, NFT, DAO, CRYPTO 项目。

项目愿景是给初级开发者一个可执行且最简的区块链 Dapp 学习路线图，给进阶开发者一个可以交流和协作的平台。

本项目会成立学习小组进行任务分工，然后一起研究主流dapp项目，每周进行技术分享，输出成果会作为视频上传Youtube。

项目秉持 开源大学 的理念，会以DAO治理形式管理此开源项目。本项目受以太坊基金会赞助，我们会将资金奖励给项目的优秀贡献者。开源项目维护不易，欢迎gitcoin捐赠。想跟踪项目最新进展，欢迎关注我们的推特和Youtube。 项目由来可以阅读《Dapp-Learning 欢迎您的加入》。

此项目仍在开发中，适合各阶段的开发者加入，欢迎提 PR 来创建更多的教程项目或完善已有的教程项目🤗。项目交流可加入我们的 discord 。提交三次PR或者安排一次分享即可加入我们开发者群，持续贡献高质量PR可成为PR审核者，并参与决议项目走向。项目管理细则请参看新人如何参与以及项目治理规则，欢迎理念相同的小伙伴加入。
</code>;
***** web3js
******:[[https://github.com/Dapp-Learning-DAO/Dapp-Learning/blob/main/basic/01-web3js-deploy/README-cn.md Dapp-Learning/README-cn.md at main · deploy]]
<code>
通过本样例代码，使开发者了解合约编译，部署的基本流程，并掌握基本的 web3js 接口使用方法
</code>;
******:[[https://github.com/Dapp-Learning-DAO/Dapp-Learning/blob/main/basic/02-web3js-transaction/README-cn.md Dapp-Learning/README-cn.md at main · transaction]]
<code>
通过本样例代码，开发者了解到如何对交易进行签名，发送，接收交易回执，验证交易执行结果。同时，样例也提供了事件监听的逻辑代码，开发者可以了解如何对一个事件进行一次或多次监听
</code>;
******:[[https://github.com/Dapp-Learning-DAO/Dapp-Learning/blob/main/basic/03-web3js-erc20/README-cn.md Dapp-Learning/README-cn.md at main · erc20]]
<code>
本样例演示了 ERC20 合约的基本调用, 让开发者了解 ERC20 合约的基本接口
</code>;
******:[[https://github.com/Dapp-Learning-DAO/Dapp-Learning/blob/main/basic/04-web3js-truffle/README-CN.md Dapp-Learning/README-CN.md at main · Truffle]]
<code>
ruffle 是基于 Solidity 语言的一套开发框架，它简化了去中心化应用（Dapp）的构建和管理流程。本身是采用 Javascript 编写，支持智能合约的编译、部署和测试。
</code>;
***** ethersjs
******:[[https://github.com/Dapp-Learning-DAO/Dapp-Learning/blob/main/basic/05-ethersjs-erc20/web3-vs-ethers/README-cn.md Dapp-Learning/README-cn.md at main · web3-vs-ethers]]
<code>
通过本样例代码，开发者了解到 web3.js和 ehters.js的区别
项目里主要针对 连接到etherum ，获取账户，部署合约，调用合约方法这些业务做了示例演示。
</code>;
******:[[https://github.com/Dapp-Learning-DAO/Dapp-Learning/blob/main/basic/05-ethersjs-erc20/README-CN.md Dapp-Learning/README-CN.md at main · erc20]]
<code>
本样例演示了使用 ethers.js 调用 ERC20 合约的开发流程
</code>;
******:[[https://github.com/Dapp-Learning-DAO/Dapp-Learning/blob/main/basic/06-ethersjs-waffle/README-cn.md Dapp-Learning/README-cn.md at main · waffle]]
<code>
Waffle 是一款适配 ehter.js 的智能合约测试库。本样例演示了使用 Waffle 进行测试的基本流程及使用方法.
Waffle 详细使用方法可以参考 Waffle 官网 , 对于不熟悉 Waffle 测试框架的开发者, 可以根据本样例进行基础的操作, 阅读样例代码, 形成初步的流程概念, 之后再参考官网进行更加深入的了解.
</code>;
*****:Hardhat
******:[[https://github.com/Dapp-Learning-DAO/Dapp-Learning/blob/main/basic/07-hardhat/README-cn.md Dapp-Learning/README-cn.md at main · 基础使用]]
<code>
Hardhat 是一个编译、部署、测试和调试以太坊应用的开发环境。

它可以帮助开发人员管理和自动化构建智能合约和 dApps 过程中固有的重复性任务，并围绕这一工作流程轻松引入更多功能。这意味着 hardhat 在最核心的地方是编译、运行和测试智能合约。 Hardhat 内置了 Hardhat 网络，这是一个专为开发设计的本地以太坊网络。主要功能有 Solidity 调试，跟踪调用堆栈、console.log()和交易失败时的明确错误信息提示等。

Hardhat Runner 是与 Hardhat 交互的 CLI 命令，是一个可扩展的任务运行器。它是围绕任务和插件的概念设计的。每次你从 CLI 运行 Hardhat 时，你都在运行一个任务。例如，npx hardhat compile 运行的是内置的 compile 任务。任务可以调用其他任务，允许定义复杂的工作流程。用户和插件可以覆盖现有的任务，从而定制和扩展工作流程。
</code>;
******:[[https://github.com/Dapp-Learning-DAO/Dapp-Learning/blob/main/basic/08-hardhat-graph/README-CN.md Dapp-Learning/README-CN.md at main · Graph]]
<code>
编写智能合约时，通常状态的变化是通过触发一个事件来表达，The Graph 则是捕捉区块链事件并提供一个查询事件的 GraphQL 接口，让我们可以方便的跟踪数据的变化。实际上很多 defi 协议都是 The Graph 来基于查询数据。
</code>;
******:[[https://github.com/Dapp-Learning-DAO/Dapp-Learning/blob/main/basic/09-hardhat-react/README-CN.md Dapp-Learning/README-CN.md at main · hardhat-react]]
<code>
app 开发中很重要的部分便是前端展示，本样例代码使用 hardhat 结合 react 和 MetaMask，演示如何开发 Dapp 前端页面，以及开发的基本流程及接口调用。开发者需要具备 react 框架开发能力才能很好的理解样例代码.

为方便获取，在 .env 中放入的私钥，格式为 "PRIVATE_KEY=xxxx", 然后代码自动从中读取
</code>;
******:[[https://github.com/Dapp-Learning-DAO/Dapp-Learning/blob/main/basic/10-hardhat-ipfs-erc721/README-CN.md hardhat-ipfs-erc721]]
<code>
是一个旨在创建持久且分布式存储和共享文件的网络传输协议。它是一种内容可寻址的对等超媒体分发协议。

在 IPFS 网络中的节点将构成一个分布式文件系统。它是一个开放源代码项目，自 2014 年开始由协议实验室在开源社区的帮助下发展。其最初由 Juan Benet 设计
IPFS 是一个对等的分布式文件系统，它尝试为所有计算设备连接同一个文件系统。在某些方面，IPFS 类似于万维网，也可以被视作一个独立的 BitTorrent 群、在同一个 Git 仓库中交换对象。 换种说法，IPFS 提供了一个高吞吐量、按内容寻址的块存储模型，及与内容相关超链接。这形成了一个广义的 Merkle 有向无环图（DAG）。

IPFS 结合了分布式散列表、鼓励块交换和一个自我认证的名字空间。IPFS 没有单点故障，并且节点不需要相互信任。分布式内容传递可以节约带宽，和防止 HTTP 方案可能遇到的 DDoS 攻击。

该文件系统可以通过多种方式访问，包括 FUSE 与 HTTP。将本地文件添加到 IPFS 文件系统可使其面向全世界可用。文件表示基于其哈希，因此有利于缓存。文件的分发采用一个基于 BitTorrent 的协议。其他查看内容的用户也有助于将内容提供给网络上的其他人。
IPFS 有一个称为 IPNS 的名称服务，它是一个基于 PKI 的全局名字空间，用于构筑信任链，这与其他 NS 兼容，并可以映射 DNS、.onion、.bit 等到 IPNS。
</code>;
****** [[https://github.com/Dapp-Learning-DAO/Dapp-Learning/blob/main/basic/11-react-express-hardhat/README-CN.md Express结合hardhat]]
*****:[[https://github.com/Dapp-Learning-DAO/Dapp-Learning/blob/main/basic/12-token-crowdfund/README-CN.md Dapp-Learning/README-CN.md at main 众筹合约]]
<code>
本样例演示众筹合约的基本流程，包括部署合约、合约以及启动众筹项目。
</code>;
**** [[https://twitter.com/Dapp_Learning Dapp-Learning (@Dapp_Learning) / Twitter]]
**** [[https://www.youtube.com/c/DappLearning/videos Dapp Learning - YouTube]]
**** [[https://docs.qq.com/doc/DQ3hWeVVXQ3JPbXFS Dapp-Learning开源大学分享列表]]
**** [[https://github.com/Dapp-Learning-DAO/Dapp-Learning/blob/main/docs/develop-tools.md 开发工具推荐]]
**** [[https://discord.com/invite/cRYNYXqPeR Discord Room-Dapp Learning]]
*** Defi
*** NFT
*** DAO
*** CRYPTO
** 开发指南
*** intro
**** [[https://www.devpill.me/docs/introduction/blockchain-development/ What is blockchain development?]]
*** Ethereum
**** [[https://www.devpill.me/ web3技能大全]]
**** [[https://www.devpill.me/docs/introduction/skill-based/ Skill-based specializations]]
***** [[https://www.devpill.me/docs/front-end-development/introduction/ Front End Development]]
****** [[https://www.devpill.me/docs/front-end-development/react/ React]]
****** [[https://www.devpill.me/docs/front-end-development/typescript/ Typescript]]
****** [[https://www.devpill.me/docs/front-end-development/nextjs/ NextJS]]
****** Indexing/Quering
******* [[https://www.devpill.me/docs/front-end-development/indexing-querying/#thegraph TheGraph]]
******* [[https://www.devpill.me/docs/front-end-development/indexing-querying/#nodes Nodes]]
******* [[https://www.devpill.me/docs/front-end-development/indexing-querying/#moralis Moralis]]
****** [[https://www.devpill.me/docs/front-end-development/web3-libraries/ Web3 libraries(Ether.js)]]
****** [[https://www.devpill.me/docs/front-end-development/web3-templates/ Web3 templates]]
******* [[https://docs.moralis.io/moralis-dapp/connect-the-sdk/boilerplate-projects Moralis Starter-Boilerplate Projects - Moralis]]
******* [[https://github.com/scaffold-eth/scaffold-eth scaffold-eth/scaffold-eth: 🏗 forkable Ethereum dev stack focused on fast product iterations]]
******* [[https://github.com/paulrberg/create-eth-app paulrberg/create-eth-app: Create Ethereum-powered apps with one command]]
***** [[https://www.devpill.me/docs/back-end-development/introduction/ Backend Development]]
****** [[https://www.devpill.me/docs/back-end-development/file-storage/ Decentralized file storage]]
******* [[https://ipfs.tech/ IPFS Powers the Distributed Web]]
******* [[https://www.arweave.org/ arweave]]
****** [[https://www.devpill.me/docs/back-end-development/did/ DID]]
******* [[https://www.spruceid.com/ Spruce - Decentralized Identity and Data]]
******* [[https://login.xyz/ Sign-In with Ethereum]]
****** [[https://www.devpill.me/docs/back-end-development/automation/ Automation]]
******* [[https://www.gelato.network/ Gelato - Automated smart contract executions on Ethereum]]
****** [[https://www.devpill.me/docs/back-end-development/apis/ Miscellaneous APIs]]
******* [[https://docs.opensea.io/reference/api-overview Opensea API Overview]]
***** [[https://www.devpill.me/docs/smart-contract-development/introduction/ Smart Contract Development]]
****** [[https://www.devpill.me/docs/smart-contract-development/solidity/ Solidity]]
****** [[https://www.devpill.me/docs/smart-contract-development/oracles/ Oracles]]
****** [[https://www.devpill.me/docs/smart-contract-development/testing/ Testing]]
******* [[https://github.com/foundry-rs/foundry foundry-rs/foundry: Foundry is a blazing fast, portable and modular toolkit for Ethereum application development written in Rust.]]
******* [[https://hardhat.org/ Hardhat | Ethereum development environment for professionals by Nomic Foundation]]
******* [[https://github.com/dapphub/dapptools dapphub/dapptools: Dapp, Seth, Hevm, and more]]
******* [[https://trufflesuite.com/ Home - Truffle Suite]]
****** [[https://www.devpill.me/docs/smart-contract-development/design-patterns/ Design patterns]]
******* [[https://docs.ens.domains/contract-developer-guide/resolving-names-on-chain Resolving Names On-chain - ENS Documentation]]
******* [[https://docs.ens.domains/contract-developer-guide/writing-a-resolver Writing a Resolver - ENS Documentation]]
****** [[https://www.devpill.me/docs/smart-contract-development/specialized-languages/ Specialized languages]]
******* [[https://docs.soliditylang.org/en/v0.8.12/yul.html Yul — Solidity 0.8.12 documentation]]
******* [[https://github.com/fuelLabs/yulp FuelLabs/yulp: ➕ A low-level, highly efficient extension to Yul, an intermediate language for the Ethereum Virtual Machine.]]
******* [[https://docs.soliditylang.org/en/v0.8.12/assembly.html Inline Assembly — Solidity 0.8.12 documentation]]
****** [[https://www.devpill.me/docs/smart-contract-development/evm-deep-dive/ EVM deep dive]]
******* [[https://noxx3xxon.notion.site/noxx3xxon/The-EVM-Handbook-bb38e175cc404111a391907c4975426d The EVM Handbook]]
******* [[https://freddycoen.medium.com/evm-starter-kit-1790bcc992ef EVM development Starter Kit. Note: This blog post is divided into… | by FreddyCoen | Medium]]
******* [[https://github.com/ethereumbook/ethereumbook/blob/develop/13evm.asciidoc ethereumbook/13evm.asciidoc at develop · ethereumbook/ethereumbook]]
******* [[https://femboy.capital/evm-pt1 A Playdate with the EVM - femboy capital]]
******* and more
*****:[[https://www.devpill.me/docs/full-stack-development/introduction/ Full Stack Development]]
<code>
Since rewriting the front end, back end and smart contract sections
would be pointless, I’ll dedicate this section just to list a bunch
of full-stack guides, tips and tricks, deployment guidelines, project
management, and other relevant information.
</code>;
****** [[https://github.com/ossu/computer-science ossu/computer-science: Path to a free self-taught education in Computer Science!]]
****** [[https://www.youtube.com/watch?v=MlJPjJQZtC8 👨‍🏫 Introduction to Ethereum development - YouTube]]
****** [[https://dev.to/edge-and-node/the-complete-guide-to-full-stack-web3-development-4g74 The Complete Guide to Full Stack Web3 Development - DEV Community]] [[https://twitter.com/dabit3 nader (🧱, 🚀) | nader.arweave.dev | nader.lens 🧢 (@dabit3) / Twitter]]
****** [[https://speedrunethereum.com/ Speed Run Ethereum]] [[https://twitter.com/austingriffith Austin Griffith (@austingriffith) / Twitter]]
****** [[https://www.youtube.com/watch?v=M576WGiDBdQ Solidity, Blockchain, and Smart Contract Course – Beginner to Expert Python Tutorial - YouTube]]
****** [[https://github.com/smartcontractkit/full-blockchain-solidity-course-py smartcontractkit/full-blockchain-solidity-course-py: Ultimate Solidity, Blockchain, and Smart Contract - Beginner to Expert Full Course | Python Edition]] [[https://twitter.com/PatrickAlphaC Patrick Collins (@PatrickAlphaC) / Twitter]]
****** [[https://github.com/OffcierCia/DeFi-Developer-Road-Map OffcierCia/DeFi-Developer-Road-Map: DeFi Developer roadmap is a curated Web3.0 Developer handbook which includes a list of the best tools for DApps, development resources and lifehacks.]]
****** [[https://www.youtube.com/watch?v=xXxjRzdYIss Build Uniswap Blockchain Web 3.0 App with Solidity | Next.js | Sanity.io ($100 Crypto Giveaway) - YouTube]]
***** [[https://www.devpill.me/docs/core-development/introduction/ Core Development]]
****** [[https://www.devpill.me/docs/core-development/general-learning/ General learning]]
******:[[https://www.devpill.me/docs/core-development/l1/ Eth1 / execution layer]]
<code>
Networking: devp2p
EVM
Tx pool
Sync methods (Fast, Snap, Archive, Beam, Light)
State DB
User-facing (JSON RPC, tx tracing, etc.)
</code>;
******:[[https://www.devpill.me/docs/core-development/l2/ Eth2 / consensus layer]]
<code>
Networking: libp2p
Fork-choice
Attestations / BLS aggregation
Staking / Validator clients
Slashings
Sharding
</code>;
***** Security engineer
***** Protocol development
***** Cryptographer
***** Blockchain data analytics
**** [[https://www.devpill.me/docs/introduction/application-based/ Application-based specializations]]
***** DeFi
***** Creator Economy
***** MEV
***** L2s
***** Infrastructure
***** Gaming
***** Privacy
***** Coordination / Public goods

@endmindmap